"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var AdminModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminModule = void 0;
const adminjs_1 = __importDefault(require("adminjs"));
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const serve_static_provider_1 = require("./serve-static.provider");
const token_constants_1 = require("./token.constants");
const abstract_loader_1 = require("./loaders/abstract.loader");
const admin_resource_service_1 = __importDefault(require("./admin-resource.service"));
let AdminModule = AdminModule_1 = class AdminModule {
    constructor(httpAdapterHost, loader, adminModuleOptions) {
        this.httpAdapterHost = httpAdapterHost;
        this.loader = loader;
        this.adminModuleOptions = adminModuleOptions;
    }
    static createAdmin(options) {
        return {
            module: AdminModule_1,
            providers: [
                {
                    provide: token_constants_1.CONFIG_TOKEN,
                    useValue: options,
                },
                options.customLoader ? {
                    provide: abstract_loader_1.AbstractLoader,
                    useClass: options.customLoader,
                } : serve_static_provider_1.serveStaticProvider,
            ],
        };
    }
    static createAdminAsync(options) {
        return {
            imports: options.imports,
            module: AdminModule_1,
            providers: [
                {
                    provide: token_constants_1.CONFIG_TOKEN,
                    useFactory: options.useFactory,
                    inject: options.inject,
                },
                options.customLoader ? {
                    provide: abstract_loader_1.AbstractLoader,
                    useClass: options.customLoader,
                } : serve_static_provider_1.serveStaticProvider,
            ],
        };
    }
    onModuleInit() {
        if ('shouldBeInitialized' in this.adminModuleOptions && !this.adminModuleOptions.shouldBeInitialized) {
            return;
        }
        const forFeatureResources = admin_resource_service_1.default.getResources();
        const adminJSOptions = forFeatureResources.length > 0
            ? Object.assign(Object.assign({}, this.adminModuleOptions.adminJsOptions), { resources: forFeatureResources }) : this.adminModuleOptions.adminJsOptions;
        const admin = new adminjs_1.default(adminJSOptions);
        const { httpAdapter } = this.httpAdapterHost;
        this.loader.register(admin, httpAdapter, Object.assign(Object.assign({}, this.adminModuleOptions), { adminJsOptions: admin.options }));
    }
};
AdminModule = AdminModule_1 = __decorate([
    common_1.Module({}),
    __param(2, common_1.Inject(token_constants_1.CONFIG_TOKEN)),
    __metadata("design:paramtypes", [core_1.HttpAdapterHost,
        abstract_loader_1.AbstractLoader, Object])
], AdminModule);
exports.AdminModule = AdminModule;
//# sourceMappingURL=admin.module.js.map