import { getClassValidatorPropertyTitle, getClassValidatorTitle } from '../multi-lang';
/**
 * Convert the constraint to a string to be shown in an error
 */
export function constraintToString(constraint) {
    if (Array.isArray(constraint)) {
        return constraint.join(', ');
    }
    return "".concat(constraint);
}
var ValidationUtils = /** @class */ (function () {
    function ValidationUtils() {
    }
    ValidationUtils.replaceMessageSpecialTokens = function (message, validationArguments, titles) {
        var checkTitle = Object.keys(titles).length > 0;
        var messageString = '';
        if (message instanceof Function) {
            messageString = message(validationArguments);
        }
        else if (typeof message === 'string') {
            messageString = message;
        }
        if (messageString && Array.isArray(validationArguments.constraints)) {
            validationArguments.constraints.forEach(function (constraint, index) {
                messageString = messageString.replace(new RegExp("\\$constraint".concat(index + 1), 'g'), (checkTitle &&
                    titles[getClassValidatorTitle(validationArguments.object, constraintToString(constraint)) ||
                        constraintToString(constraint)]) ||
                    constraintToString(constraint));
            });
        }
        if (messageString &&
            validationArguments.value !== undefined &&
            validationArguments.value !== null &&
            typeof validationArguments.value === 'string')
            messageString = messageString.replace(/\$value/g, (checkTitle &&
                titles[getClassValidatorTitle(validationArguments.object, validationArguments.value) || validationArguments.value]) ||
                validationArguments.value);
        if (messageString) {
            messageString = messageString.replace(/\$property/g, (checkTitle &&
                titles[getClassValidatorPropertyTitle(validationArguments.object, validationArguments.property) ||
                    validationArguments.property]) ||
                validationArguments.property);
        }
        if (messageString) {
            messageString = messageString.replace(/\$target/g, (checkTitle &&
                titles[getClassValidatorTitle(validationArguments.object, '') || validationArguments.targetName]) ||
                validationArguments.targetName);
        }
        return messageString;
    };
    return ValidationUtils;
}());
export { ValidationUtils };
//# sourceMappingURL=ValidationUtils.js.map