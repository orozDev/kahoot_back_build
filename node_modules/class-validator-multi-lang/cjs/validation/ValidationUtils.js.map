{"version":3,"file":"ValidationUtils.js","sourceRoot":"","sources":["../../../src/validation/ValidationUtils.ts"],"names":[],"mappings":";;;AAAA,8CAAuF;AAGvF;;GAEG;AACH,SAAgB,kBAAkB,CAAC,UAAmB;IACpD,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9B;IAED,OAAO,GAAG,UAAU,EAAE,CAAC;AACzB,CAAC;AAND,gDAMC;AAED,MAAa,eAAe;IAC1B,MAAM,CAAC,2BAA2B,CAChC,OAAyD,EACzD,mBAAwC,EACxC,MAAiC;QAEjC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAClD,IAAI,aAAa,GAAW,EAAE,CAAC;QAC/B,IAAI,OAAO,YAAY,QAAQ,EAAE;YAC/B,aAAa,GAAI,OAAiD,CAAC,mBAAmB,CAAC,CAAC;SACzF;aAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACtC,aAAa,GAAG,OAAO,CAAC;SACzB;QAED,IAAI,aAAa,IAAI,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAE;YACnE,mBAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE;gBAC5D,aAAa,GAAG,aAAa,CAAC,OAAO,CACnC,IAAI,MAAM,CAAC,gBAAgB,KAAK,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAC5C,CAAC,UAAU;oBACT,MAAM,CACJ,IAAA,mCAAsB,EAAC,mBAAmB,CAAC,MAAM,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;wBAChF,kBAAkB,CAAC,UAAU,CAAC,CACjC,CAAC;oBACF,kBAAkB,CAAC,UAAU,CAAC,CACjC,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QAED,IACE,aAAa;YACb,mBAAmB,CAAC,KAAK,KAAK,SAAS;YACvC,mBAAmB,CAAC,KAAK,KAAK,IAAI;YAClC,OAAO,mBAAmB,CAAC,KAAK,KAAK,QAAQ;YAE7C,aAAa,GAAG,aAAa,CAAC,OAAO,CACnC,UAAU,EACV,CAAC,UAAU;gBACT,MAAM,CACJ,IAAA,mCAAsB,EAAC,mBAAmB,CAAC,MAAM,EAAE,mBAAmB,CAAC,KAAK,CAAC,IAAI,mBAAmB,CAAC,KAAK,CAC3G,CAAC;gBACF,mBAAmB,CAAC,KAAK,CAC5B,CAAC;QACJ,IAAI,aAAa,EAAE;YACjB,aAAa,GAAG,aAAa,CAAC,OAAO,CACnC,aAAa,EACb,CAAC,UAAU;gBACT,MAAM,CACJ,IAAA,2CAA8B,EAAC,mBAAmB,CAAC,MAAM,EAAE,mBAAmB,CAAC,QAAQ,CAAC;oBACtF,mBAAmB,CAAC,QAAQ,CAC/B,CAAC;gBACF,mBAAmB,CAAC,QAAQ,CAC/B,CAAC;SACH;QACD,IAAI,aAAa,EAAE;YACjB,aAAa,GAAG,aAAa,CAAC,OAAO,CACnC,WAAW,EACX,CAAC,UAAU;gBACT,MAAM,CAAC,IAAA,mCAAsB,EAAC,mBAAmB,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,mBAAmB,CAAC,UAAU,CAAC,CAAC;gBACjG,mBAAmB,CAAC,UAAU,CACjC,CAAC;SACH;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;CACF;AAhED,0CAgEC","sourcesContent":["import { getClassValidatorPropertyTitle, getClassValidatorTitle } from '../multi-lang';\nimport { ValidationArguments } from './ValidationArguments';\n\n/**\n * Convert the constraint to a string to be shown in an error\n */\nexport function constraintToString(constraint: unknown): string {\n  if (Array.isArray(constraint)) {\n    return constraint.join(', ');\n  }\n\n  return `${constraint}`;\n}\n\nexport class ValidationUtils {\n  static replaceMessageSpecialTokens(\n    message: string | ((args: ValidationArguments) => string),\n    validationArguments: ValidationArguments,\n    titles: { [key: string]: string }\n  ): string {\n    const checkTitle = Object.keys(titles).length > 0;\n    let messageString: string = '';\n    if (message instanceof Function) {\n      messageString = (message as (args: ValidationArguments) => string)(validationArguments);\n    } else if (typeof message === 'string') {\n      messageString = message;\n    }\n\n    if (messageString && Array.isArray(validationArguments.constraints)) {\n      validationArguments.constraints.forEach((constraint, index) => {\n        messageString = messageString.replace(\n          new RegExp(`\\\\$constraint${index + 1}`, 'g'),\n          (checkTitle &&\n            titles[\n              getClassValidatorTitle(validationArguments.object, constraintToString(constraint)) ||\n                constraintToString(constraint)\n            ]) ||\n            constraintToString(constraint)\n        );\n      });\n    }\n\n    if (\n      messageString &&\n      validationArguments.value !== undefined &&\n      validationArguments.value !== null &&\n      typeof validationArguments.value === 'string'\n    )\n      messageString = messageString.replace(\n        /\\$value/g,\n        (checkTitle &&\n          titles[\n            getClassValidatorTitle(validationArguments.object, validationArguments.value) || validationArguments.value\n          ]) ||\n          validationArguments.value\n      );\n    if (messageString) {\n      messageString = messageString.replace(\n        /\\$property/g,\n        (checkTitle &&\n          titles[\n            getClassValidatorPropertyTitle(validationArguments.object, validationArguments.property) ||\n              validationArguments.property\n          ]) ||\n          validationArguments.property\n      );\n    }\n    if (messageString) {\n      messageString = messageString.replace(\n        /\\$target/g,\n        (checkTitle &&\n          titles[getClassValidatorTitle(validationArguments.object, '') || validationArguments.targetName]) ||\n          validationArguments.targetName\n      );\n    }\n\n    return messageString;\n  }\n}\n"]}